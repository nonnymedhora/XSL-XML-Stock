// AllStockXMLServlet.java
/*********************************************************************************

File Name :			AllStockXMLServlet.java
Description :		Servlet that retrieves all stock info from database, generates
					an XML DOM document in memory from the vector of stocks
					and then transforms using the users specified stylesheet
Version :		````v0.1
Note: Generation of DOM and Transformation via stylesheet adapted from
	Java & XSLT (209-212)
*********************************************************************************/

package Stocks_XMLApplication;

import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import java.net.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;

import org.apache.xml.serialize.XMLSerializer;
import org.apache.xml.serialize.OutputFormat;


import org.apache.batik.dom.svg.SVGDOMImplementation;
import org.apache.batik.dom.util.DOMUtilities;

public class AllStockXMLServlet extends HttpServlet {
	
	/**
	 *	Method Name: init
	 *  Method Desc: initialize the servlet
	 *  @param ServletConfig -- the servlet confiuration
	 *	@exception ServletException -- in case any errors occurs during initialization
	 *	@return -- void
	 */
	public void init(ServletConfig config) throws ServletException {
		super.init(config);
	}
	
	/*
	 *	Method Name: doGet
	 *	Method Desc: Handle Get operations of the servlet
	 *	@param HttpServletRequest -- the incoming request
	 *	@param HttpServletResponse -- the outgoing response
	 *	@exception ServletException -- errors generated by servlet
	 *	@exception IOException -- for IO operation errors
	 */
	public void doGet(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException
	{
		processALLStockRequest(request, response);
	}
	
	/*
	 *	Method Name: doPost
	 *	Method Desc: Handle Post operations of the servlet
	 *	@param HttpServletRequest -- the incoming request
	 *	@param HttpServletResponse -- the outgoing response
	 *	@exception ServletException -- errors generated by servlet
	 *	@exception IOException -- for IO operation errors
	 */
	public void doPost(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException
	{
		processALLStockRequest(request, response);
	}
	
	/*
	 *	Method Name: processALLStockRequest
	 *	Method Desc: Gathers all the stock info from the database in a Vector,
	 *				 then forwards info to generateXMLDOMStockDocument
	 *	@param HttpServletRequest -- the incoming request
	 *	@param HttpServletResponse -- the outgoing response
	 *	@exception ServletException -- errors generated by servlet
	 *	@exception IOException -- for IO operation errors 
	 */
	private void processALLStockRequest(HttpServletRequest request, 
										HttpServletResponse response)
		throws ServletException, IOException
	{
		
		
		Stocks_XMLApplication.StockDatabase stdb = 
									new Stocks_XMLApplication.StockDatabase();
									
		// get StockInfo from database		
		Vector theStockVector = stdb.findAllStocks();

		if(theStockVector != null)
		{
			HttpSession session = request.getSession();
			// generate the XML DOM Document
			generateXMLDOMStockDocument(request, response, theStockVector);
			
		}else // stock watch lookup failed
		{
			Stocks_XMLApplication.StringBean sb = new Stocks_XMLApplication.StringBean();
			sb.setMessage("<font color=\"red\">Stock Lookup Failed.</font>");
			HttpSession session = request.getSession();
			// set message information
			session.setAttribute("msgInfo", sb);
			// forward to JSP page to display message
			goToPage(messagePage, request, response);
			
		}
	}
	
	
	/*
	 *	Method Name: generateXMLDOMStockDocument
	 *	Method Desc: This method generates an XML DOM Document in memory 
	 *				from the vector of stocks and sends info to transformXMLDOMDocument
	 *	@param HttpServletRequest -- the incoming request
	 *	@param HttpServletResponse -- the outgoing response
	 *  @param Vector -- The vector of Stock Objects
	 *	@exception ServletException -- errors generated by servlet
	 *	@exception IOException -- for IO operation errors 
	 */
	private void generateXMLDOMStockDocument(HttpServletRequest request, 
											HttpServletResponse response, 
											Vector theStockVector) 
		throws ServletException, IOException 
	{
		try {
			Document theXMLStockInfoDocument;
			response.setContentType("text/xml");
			HttpSession session = request.getSession();
			
			// set up the DocumentBuilderFactory and DocumentBuilder
			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder docBuilder = dbf.newDocumentBuilder();
			
			// set up the Document
			theXMLStockInfoDocument = docBuilder.newDocument();
			
			// set up the root element in the Document
			Element portfolioRootElement = theXMLStockInfoDocument.createElement("portfolio");
			
			theXMLStockInfoDocument.appendChild(portfolioRootElement);			
			
			addElem(theXMLStockInfoDocument, portfolioRootElement, 
								"description", "Technology Stocks Index");
			
			for (int i = 0; i < theStockVector.size() -1; ++i) {
				
				Element stockElement = theXMLStockInfoDocument.createElement("stock");
				portfolioRootElement.appendChild(stockElement);
				
				// traverse thru the vector, get indiviudal object itemms properties
				String companyName = 
					((Stocks_XMLApplication.Stock)theStockVector.elementAt(i)).getCompanyName();
				
				String stockSymbol = 
					((Stocks_XMLApplication.Stock)theStockVector.elementAt(i)).getCompanySymbol();
				String stockPrice  = 
					String.valueOf(((Stocks_XMLApplication.Stock)theStockVector.elementAt(i)).getStockPrice());
				String stockPriceChange = 
					String.valueOf(((Stocks_XMLApplication.Stock)theStockVector.elementAt(i)).getStockPriceChange());
				String stockPricePercentChange = 
					String.valueOf(((Stocks_XMLApplication.Stock)theStockVector.elementAt(i)).getStockPricePercentChange());
				String stockVolume = 
					String.valueOf(((Stocks_XMLApplication.Stock)theStockVector.elementAt(i)).getStockVolume());
				
				// generate the xml document
				addElem(theXMLStockInfoDocument, stockElement, "name", companyName);
				addElem(theXMLStockInfoDocument, stockElement, "symbol", stockSymbol);
				addElem(theXMLStockInfoDocument, stockElement, "price", stockPrice);
				addElem(theXMLStockInfoDocument, stockElement, "change", stockPriceChange);
				addElem(theXMLStockInfoDocument, stockElement, "percent", stockPricePercentChange);
				addElem(theXMLStockInfoDocument, stockElement, "volume", stockVolume);			
			}
			
			// transform the generated in memory XML DOM Document
			transformXMLDOMDocument(theXMLStockInfoDocument, request, response);
			
		}
		catch (ParserConfigurationException pce) {		
		log("Parser problem");
		} 
		catch(DOMException e) {
			log( "There's a DOM problem.");
		}
	}
	
	/*
	 *	Method Name: transformXMLDOMDocument
	 *	Method Desc: This method accepts the XML Document generated and
	 *				 transforms it based on the user's requirements and sends out
	 *				 the appropriate response stream
	 *	@param Document -- the XML Document generated
	 *	@param HttpServletRequest -- the incoming request
	 *	@param HttpServletResponse -- the outgoing response
	 *	@exception ServletException -- errors generated by servlet
	 *	@exception IOException -- for IO operation errors 
	 */
	private void transformXMLDOMDocument(Document theXMLStockInfoDocument, 
										HttpServletRequest request,
										HttpServletResponse response)  
    	throws IOException, ServletException
    {
    	// set up the TransformerFactory
    	TransformerFactory transFact = TransformerFactory.newInstance();
    	String styleSheet = null;
        try {
        		// choose the appropriate style sheet and response stream
        		// based on incoming request --- default is "normal view"
        		if(request.getParameter("changeStyle") != null) {        			
        			String theStyle = request.getParameter("changeStyle");        			
        			if(theStyle.equalsIgnoreCase("normal view")) {
		        		styleSheet = XSLT_STYLESHEET_NORMAL;
		        		response.setContentType("text/html");
		        	} else if(theStyle.equalsIgnoreCase("sorting view")) {
		        		styleSheet = XSLT_STYLESHEET_SORTING;
		        		response.setContentType("text/html");
		        	} else if(theStyle.equalsIgnoreCase("graphic view")) {
		        		styleSheet = XSLT_STYLESHEET_GRAPHIC;
		        		response.setContentType("image/svg+xml");		        		
		        	} else {
		        		styleSheet = XSLT_STYLESHEET_NORMAL;
		        		response.setContentType("text/html");
		        	}
        		} else if(request.getParameter("sortingStyle") != null) {
        			// choose the appropriate sorting style sheet and response stream
        			// based on incoming request --- default is "name sort"
        			String sortingStyle = request.getParameter("sortingStyle");
        			if(sortingStyle.equalsIgnoreCase("company")) {
        				styleSheet = XSLT_STYLESHEET_SORT_NAME;
        				response.setContentType("text/html");
        			} else if(sortingStyle.equalsIgnoreCase("symbol")) {
        				styleSheet = XSLT_STYLESHEET_SORT_SYMBOL;
        				response.setContentType("text/html");
        			} else if(sortingStyle.equalsIgnoreCase("price")) {
        				styleSheet = XSLT_STYLESHEET_SORT_PRICE;
        				response.setContentType("text/html");
        			} else if(sortingStyle.equalsIgnoreCase("change")) {
        				styleSheet = XSLT_STYLESHEET_SORT_CHANGE;
        				response.setContentType("text/html");
        			} else if(sortingStyle.equalsIgnoreCase("percent")) {
        				styleSheet = XSLT_STYLESHEET_SORT_PERCENT;
        				response.setContentType("text/html");
        			} else if(sortingStyle.equalsIgnoreCase("volume")) {
        				styleSheet = XSLT_STYLESHEET_SORT_VOLUME;
        				response.setContentType("text/html");
        			} else {
        				styleSheet = XSLT_STYLESHEET_SORT_NAME;
        				response.setContentType("text/html");
        			}
        			
        		} 
        		else {
        			styleSheet = XSLT_STYLESHEET_NORMAL;
        			response.setContentType("text/html");
		        } 
		    // set up the stylesheet    
            URL xsltURL = getServletContext().getResource(styleSheet);
            String xsltSystemID = xsltURL.toExternalForm();
            // load stylesheets into memory
            Templates stockInfoTemplate = transFact.newTemplates(new StreamSource(xsltSystemID));
            Transformer trans = stockInfoTemplate.newTransformer();
            
            PrintWriter writer = response.getWriter();
			// send translated with appropriate response stream
            trans.transform(new DOMSource(theXMLStockInfoDocument), new StreamResult(writer));
            
        } catch (TransformerConfigurationException tce) {
            log("Unable to compile stylesheet", tce);
            throw new UnavailableException("Unable to compile stylesheet");
        } catch (MalformedURLException mue) {
            log("Unable to locate XSLT file: " + styleSheet);
            throw new UnavailableException(
                    "Unable to locate XSLT file: " + styleSheet);
        } catch (Exception ex) {
			log("Other Error");
    	}     

    }
    
    /*
	 *	Method Name: goToPage
	 *	Method Desc: A generic helper method that supports processRequest to forward 
	 *					to a particular page
	 * @param  address - the URL page to go to
	 * @param  request - an HttpServletRequest 
	 * @param  response - an HttpServletResponse
	 * @exception ServletException, IOException	
	 * Original source from More Servlets & Java Server Pages(page 224)
	 **/
    private void goToPage ( String address, HttpServletRequest request, 
							HttpServletResponse response)
		throws ServletException, IOException 
	{
		RequestDispatcher dispatcher = 
							getServletContext().getRequestDispatcher(address);
		dispatcher.forward(request, response);
		
	}
    
    /**
     * Method Name -- addElem
     * Method Desc: A helper method that simplifies this XML DOM genartion
     *
     * @param doc the DOM Document, used as a factory for
     *        creating Elements.
     * @param parent the DOM Element to add the child to.
     * @param elemName the name of the XML element to create.
     * @param elemValue the text content of the new XML element.
     * Source adapted from Java & XSLT (page 210)
     */
    private void addElem(Document doc, Element parent, String elemName,
            String elemValue) {
        Element elem = doc.createElement(elemName);
        elem.appendChild(doc.createTextNode(elemValue));
        parent.appendChild(elem);
    }
    
	private static final String messagePage 		= "/StockMessage.jsp";
	private final String STOCK_QUERY_RESULT_TITLE 	= "Stock Query Result";
	
	private static final String XSLT_STYLESHEET_NORMAL	 	= "/WEB-INF/xslt/stock-normal.xsl";
	private static final String XSLT_STYLESHEET_GRAPHIC	 	= "/WEB-INF/xslt/stock-graph.xsl";
	
	// default sorts by name
	private static final String XSLT_STYLESHEET_SORTING	 	= "/WEB-INF/xslt/stock-sorting.xsl";
	
	private static final String XSLT_STYLESHEET_SORT_NAME	= "/WEB-INF/xslt/stock-sort-name.xsl";
	private static final String XSLT_STYLESHEET_SORT_SYMBOL	= "/WEB-INF/xslt/stock-sort-symbol.xsl";
	private static final String XSLT_STYLESHEET_SORT_PRICE	= "/WEB-INF/xslt/stock-sort-price.xsl";
	private static final String XSLT_STYLESHEET_SORT_CHANGE	= "/WEB-INF/xslt/stock-sort-change.xsl";
	private static final String XSLT_STYLESHEET_SORT_PERCENT = "/WEB-INF/xslt/stock-sort-percent.xsl";
	private static final String XSLT_STYLESHEET_SORT_VOLUME	= "/WEB-INF/xslt/stock-sort-volume.xsl";
	
}