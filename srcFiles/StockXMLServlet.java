// StockXMLServlet.java
/*********************************************************************************
File Name :			StockXMLServlet.java
Description :		Servlet that retrieves single stock info from database, generates
					an XML DOM document in memory from the stocks info
					and then transforms using the "normal" stylesheet
*********************************************************************************/


package Stocks_XMLApplication;

import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import java.net.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;


public class StockXMLServlet extends HttpServlet {
	
	/**
	 *	Method Name: init
	 *  Method Desc: initialize the servlet
	 *  @param ServletConfig -- the servlet confiuration
	 *	@exception ServletException -- in case any errors occurs during initialization
	 *	@return -- void
	 */
	public void init(ServletConfig config) throws ServletException {
		super.init(config);
	}

	/*
	 *	Method Name: doGet
	 *	Method Desc: Handle Get operations of the servlet
	 *	@param HttpServletRequest -- the incoming request
	 *	@param HttpServletResponse -- the outgoing response
	 *	@exception ServletException -- errors generated by servlet
	 *	@exception IOException -- for IO operation errors
	 */
	 public void doGet(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException
	{
		processSingleStockXMLRequest(request, response);
	}
	
	/*
	 *	Method Name: doPost
	 *	Method Desc: Handle Post operations of the servlet
	 *	@param HttpServletRequest -- the incoming request
	 *	@param HttpServletResponse -- the outgoing response
	 *	@exception ServletException -- errors generated by servlet
	 *	@exception IOException -- for IO operation errors
	 */
	public void doPost(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException
	{
		processSingleStockXMLRequest(request, response);
	}
	
	/*
	 *	Method Name: processSingleStockRequest
	 *	Method Desc: Gathers the individual stock info object from the database 
	 *				 then forwards info to generateXMLDOMStockDocument
	 *	@param HttpServletRequest -- the incoming request
	 *	@param HttpServletResponse -- the outgoing response
	 *	@exception ServletException -- errors generated by servlet
	 *	@exception IOException -- for IO operation errors 
	 */
	private void processSingleStockXMLRequest(HttpServletRequest request, 
											HttpServletResponse response)
		throws ServletException, IOException
	{ 
		Stocks_XMLApplication.StockDatabase stdb = 
									new Stocks_XMLApplication.StockDatabase();
		String stockSymbol = request.getParameter("stockSymbol");
		
		// get StockInfo from database
		Stocks_XMLApplication.Stock theStockInfo = stdb.findStock(stockSymbol);

		if(theStockInfo != null)
		{
			HttpSession session = request.getSession();
			generateXMLDOMStockDocument(request, response, theStockInfo);
			
		}else // stock watch lookup failed
		{
			Stocks_XMLApplication.StringBean sb = 
										new Stocks_XMLApplication.StringBean();
			sb.setMessage("<font color=\"red\">Stock Lookup Failed.</font>");
			HttpSession session = request.getSession();
			// set message information
			session.setAttribute("msgInfo", sb);
			// forward to JSP page to display message
			goToPage("/StockMessage.jsp", request, response);
			
		}
	}
	
	/*
	 *	Method Name: generateXMLDOMStockDocument
	 *	Method Desc: This method generates an XML DOM Document in memory 
	 *				from the stock object and sends info to transformXMLDOMDocument
	 *	@param HttpServletRequest -- the incoming request
	 *	@param HttpServletResponse -- the outgoing response
	 *  @param Vector -- The vector of Stock Objects
	 *	@exception ServletException -- errors generated by servlet
	 *	@exception IOException -- for IO operation errors 
	 */
	 private void generateXMLDOMStockDocument(HttpServletRequest request, 
											HttpServletResponse response,
											Stocks_XMLApplication.Stock theStockInfo ) 
		throws ServletException, IOException 
	{
												
		try {
			Document theXMLStockInfoDocument;			
			response.setContentType("text/xml");
			HttpSession session = request.getSession();
			
			// set up the DocumentBuilderFactory and DocumentBuilder
			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder docBuilder = dbf.newDocumentBuilder();
			
			// set up the Document
			theXMLStockInfoDocument = docBuilder.newDocument();
			
			// set up the root element in the Document
			Element portfolioRootElement = theXMLStockInfoDocument.createElement("portfolio");
			theXMLStockInfoDocument.appendChild(portfolioRootElement);
			
			Element stockElement = theXMLStockInfoDocument.createElement("stock");
			portfolioRootElement.appendChild(stockElement);
			
			//get indiviudal object itemms properties
			String companyName = theStockInfo.getCompanyName();
			String stockSymbol = theStockInfo.getCompanySymbol();
			String stockPrice  = String.valueOf(theStockInfo.getStockPrice());
			String stockPriceChange = String.valueOf(theStockInfo.getStockPriceChange());
			String stockPricePercentChange = String.valueOf(theStockInfo.getStockPricePercentChange());
			String stockVolume = String.valueOf(theStockInfo.getStockVolume());
				
			// generate the xml document
			addElem(theXMLStockInfoDocument, stockElement, "name", companyName);
			addElem(theXMLStockInfoDocument, stockElement, "symbol", stockSymbol); 
			addElem(theXMLStockInfoDocument, stockElement, "price", stockPrice);
			addElem(theXMLStockInfoDocument, stockElement, "change", stockPriceChange);
			addElem(theXMLStockInfoDocument, stockElement, "percent", stockPricePercentChange);
			addElem(theXMLStockInfoDocument, stockElement, "volume", stockVolume);				
			
			// transform the generated in memory XML DOM Document
			transformXMLDOMDocument(theXMLStockInfoDocument, response);
			
		}
		catch (ParserConfigurationException pce) {		
		log("Parser problem");
		} 
		catch(DOMException e) {
			log( "There's a DOM problem.");
		}
	}
	
	/*
	 *	Method Name: transformXMLDOMDocument
	 *	Method Desc: This method accepts the XML Document generated and
	 *				 transforms it based on the user's requirements and sends out
	 *				 the appropriate response stream
	 *	@param Document -- the XML Document generated
	 *	@param HttpServletRequest -- the incoming request
	 *	@param HttpServletResponse -- the outgoing response
	 *	@exception ServletException -- errors generated by servlet
	 *	@exception IOException -- for IO operation errors 
	 */
	private void transformXMLDOMDocument(Document theXMLClassDocument, HttpServletResponse response)  
    	throws IOException, ServletException
    {
    	TransformerFactory transFact = TransformerFactory.newInstance();
    	String styleSheet = null;
        try {
            styleSheet = XSLT_STYLESHEET;
            URL xsltURL = getServletContext().getResource(styleSheet);
            String xsltSystemID = xsltURL.toExternalForm();
            Templates classInfoTemplate = transFact.newTemplates(new StreamSource(xsltSystemID));
            Transformer trans = classInfoTemplate.newTransformer();

            response.setContentType("text/html");
            PrintWriter writer = response.getWriter();

            trans.transform(new DOMSource(theXMLClassDocument), new StreamResult(writer));
            
        } catch (TransformerConfigurationException tce) {
            log("Unable to compile stylesheet", tce);
            throw new UnavailableException("Unable to compile stylesheet");
        } catch (MalformedURLException mue) {
            log("Unable to locate XSLT file: " + styleSheet);
            throw new UnavailableException(
                    "Unable to locate XSLT file: " + styleSheet);
        } catch (Exception ex) {
			log("Other Error");
    	}     

    }
    
    /*
	 *	Method Name: goToPage
	 *	Method Desc: A generic helper method that supports processRequest to forward 
	 *					to a particular page
	 * @param  address - the URL page to go to
	 * @param  request - an HttpServletRequest 
	 * @param  response - an HttpServletResponse
	 * @exception ServletException, IOException	
	 * Original source from More Servlets & Java Server Pages(page 224)
	 **/
    private void goToPage ( String address, 
							HttpServletRequest request, 
							HttpServletResponse response)
		throws ServletException, IOException 
	{
		RequestDispatcher dispatcher = 
							getServletContext().getRequestDispatcher(address);
		dispatcher.forward(request, response);
		
	}	
    
    /**
     * Method Name -- addElem
     * Method Desc: A helper method that simplifies this XML DOM genartion
     *
     * @param doc the DOM Document, used as a factory for
     *        creating Elements.
     * @param parent the DOM Element to add the child to.
     * @param elemName the name of the XML element to create.
     * @param elemValue the text content of the new XML element.
     * Source adapted from Java & XSLT (page 210)
     */
    private void addElem(Document doc, Element parent, String elemName,
            String elemValue) {
        Element elem = doc.createElement(elemName);
        elem.appendChild(doc.createTextNode(elemValue));
        parent.appendChild(elem);
    }
    
	private static final String XSLT_STYLESHEET	 = "/WEB-INF/xslt/single-stock.xsl";
}